show DATABASES;
create database kodilla_course;
show databases;
create user 'kodilla_user' identified with MYSQL_NATIVE_PASSWORD by 'kodilla_Pass123';
GRANT ALL PRIVILEGES ON kodilla_course.* to kodilla_user;
show TABLES;

CREATE TABLE USERS (
    ID SERIAL PRIMARY KEY,
    FIRSTNAME VARCHAR(100),
    LASTNAME VARCHAR(100)
);

CREATE TABLE POSTS (
    ID SERIAL PRIMARY KEY,
    USER_ID BIGINT UNSIGNED NOT NULL,
    BODY VARCHAR(1024),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

SELECT * FROM USERS;

INSERT INTO USERS (FIRSTNAME, LASTNAME)
VALUES('John', 'Smith');

COMMIT;

INSERT INTO POSTS(USER_ID, BODY)
VALUES(1, 'This is my first post on this forum!');

SELECT * FROM POSTS;

INSERT INTO USERS (FIRSTNAME, LASTNAME)
VALUES ('Zachary', 'Lee');

INSERT INTO USERS (FIRSTNAME, LASTNAME)
VALUES ('Stephanie', 'Kovalsky');

INSERT INTO USERS (FIRSTNAME, LASTNAME)
VALUES ('Thomas', 'Landgren');

INSERT INTO USERS (FIRSTNAME, LASTNAME)
VALUES ('John', 'Thomson');

INSERT INTO POSTS (USER_ID, BODY)
VALUES (2, 'This is my first post too!');

INSERT INTO POSTS (USER_ID, BODY)
VALUES (2, 'How are you?');

INSERT INTO POSTS (USER_ID, BODY)
VALUES (1, 'Quite good, thanks bro!');

INSERT INTO POSTS (USER_ID, BODY)
VALUES (4, 'Yo all! Here is Thomas!');

COMMIT;

SELECT * FROM USERS;

SELECT * FROM POSTS;

CREATE TABLE ISSUESLISTS (
     ID SERIAL PRIMARY KEY,
     NAME VARCHAR(50)
);

CREATE TABLE ISSUES (
    ID SERIAL PRIMARY KEY,
    ISSUESLIST_ID BIGINT UNSIGNED NOT NULL,
    SUMMARY VARCHAR(50),
    DESCRIPTION VARCHAR(50),
    USER_ID_ASSIGNEDTO BIGINT UNSIGNED NOT NULL,
    FOREIGN KEY(ISSUESLIST_ID) REFERENCES ISSUESLISTS(ID),
    FOREIGN KEY(USER_ID_ASSIGNEDTO) REFERENCES USERS(ID)
);

INSERT INTO ISSUESLISTS(NAME)
VALUES('ToDo');

INSERT INTO ISSUESLISTS(NAME)
VALUES('In progress');

INSERT INTO ISSUESLISTS(NAME)
VALUES('Done');

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES(1, 'communicate', 'address complaints', 3);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES(1, 'bookkeeping', 'banking transactions', 1);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES(1, 'communicate', 'answer telephones', 2);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES(1, 'operate', 'operate scanners', 5);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES(1, 'operate', 'operate photocopiers', 4);


INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES(2, 'maintain', 'maintain mailing', 1);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES(2, 'address', 'address complaints', 3);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES(2, 'answer', 'answer telephones', 2);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES(2, 'operate', 'operate scanners', 4);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES(2, 'manage', 'manage calendars', 5);


INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES(3, 'prepare', 'prepare documents', 1);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES(3, 'train', 'train other staff members', 3);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES(3, 'make', 'make travel arrangements', 2);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES(3, 'troubleshoot', 'troubleshoot problems', 4);

INSERT INTO ISSUES(ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES(3, 'prepare', 'prepare meeting agendas', 5);

COMMIT;

SELECT ID, LASTNAME FROM USERS;

SELECT ID, FIRSTNAME FROM USERS
WHERE (ID >= 4 AND ID <= 10)
OR ID = 1;

SELECT COUNT(*) FROM USERS;

SELECT MAX(ID), MIN(ID) FROM USERS;

SELECT LASTNAME FROM USERS
WHERE LASTNAME IS NOT NULL;

SELECT SUM(ID) AS TOTAL, AVG(ID) AS AVERAGE FROM USERS;

SELECT U.FIRSTNAME, U.LASTNAME, P.BODY
FROM USERS U
JOIN POSTS P ON U.ID = P.USER_ID;

SELECT USER_ID, COUNT(*) AS POSTS_NUMBER
FROM POSTS
GROUP BY USER_ID;

SELECT USER_ID, COUNT(*) AS POSTS_NUMBER
FROM POSTS
GROUP BY USER_ID
HAVING COUNT(*) > 1;

SELECT U.FIRSTNAME, U.LASTNAME, COUNT(*) AS POSTS_NUMBER
FROM USERS U JOIN POSTS P ON U.ID = P.USER_ID
GROUP BY P.USER_ID
HAVING COUNT(*) > 1;

SELECT U.FIRSTNAME, U.LASTNAME, COUNT(*) AS POSTS_NUMBER
FROM USERS U JOIN POSTS P ON U.ID = P.USER_ID
GROUP BY P.USER_ID
HAVING COUNT(*) > 1
ORDER BY U.LASTNAME, U.FIRSTNAME;


SELECT I.DESCRIPTION, IL.NAME
FROM ISSUES I
JOIN ISSUESLISTS IL ON I.ISSUESLIST_ID = IL.ID;

SELECT U.FIRSTNAME, U.LASTNAME, GROUP_CONCAT(I.DESCRIPTION SEPARATOR ', ') AS ISSUES
FROM USERS U
JOIN ISSUES I ON U.ID = I.USER_ID_ASSIGNEDTO
GROUP BY U.FIRSTNAME, U.LASTNAME;

SELECT U.FIRSTNAME, U.LASTNAME, COUNT(I.USER_ID_ASSIGNEDTO) AS COUNT
FROM USERS U
JOIN ISSUES I ON U.ID = I.USER_ID_ASSIGNEDTO
GROUP BY U.FIRSTNAME, U.LASTNAME
HAVING COUNT >= 1;

